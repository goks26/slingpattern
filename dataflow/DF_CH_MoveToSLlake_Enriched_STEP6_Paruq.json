{
	"name": "DF_CH_MoveToSLlake_Enriched_STEP6_Paruq",
	"properties": {
		"folder": {
			"name": "SLIPSCD_Enriched"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SLIPLakeIngestion_CSV",
						"type": "DatasetReference"
					},
					"name": "CuratedInput"
				},
				{
					"dataset": {
						"referenceName": "DS_SLIPLakeIngestion_Parquet",
						"type": "DatasetReference"
					},
					"name": "ExistingDimensionTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_sling_blob",
						"type": "LinkedServiceReference"
					},
					"name": "DimensionTableSink",
					"description": "Complete the enrich (Gold layer) with SCD details."
				}
			],
			"transformations": [
				{
					"name": "NewAndUpdatedRows"
				},
				{
					"name": "AddHashInput"
				},
				{
					"name": "AddHashExisting"
				},
				{
					"name": "GetMaxSurrogateKey"
				},
				{
					"name": "AddKey"
				},
				{
					"name": "JoinWithMaxSurrogateKey"
				},
				{
					"name": "AddDimensionColumns"
				},
				{
					"name": "FilterForUpdatedValues"
				},
				{
					"name": "UpdateObsolete"
				},
				{
					"name": "DropUnwantedColsInput"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "MarkAsUpdate"
				},
				{
					"name": "DropUnwantedColumns"
				},
				{
					"name": "MarkAsInsert"
				},
				{
					"name": "FilterForActive"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"script": "parameters{\n\tPrimaryKey as string,\n\tColumns as string,\n\tvSinkFile as string,\n\tvContainerName as string,\n\tvPath as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CuratedInput\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tenableCdc: true,\n\tmode: 'read',\n\tskipInitialLoad: false,\n\tformat: 'parquet') ~> ExistingDimensionTable\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash\n\t&& AddHashInput@columns_hash == AddHashExisting@columns_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewAndUpdatedRows\nCuratedInput derive(id_hash = md5(byName($PrimaryKey)),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashInput\nFilterForActive derive(id_hash = md5(byNames(split($PrimaryKey,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashExisting\nAddHashExisting aggregate(MaxSurrogateKey = iifNull(max(toInteger(byName('SURKEY'))),0)) ~> GetMaxSurrogateKey\nNewAndUpdatedRows keyGenerate(output(SURKEY as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> AddKey\nAddKey, GetMaxSurrogateKey join(SURKEY == MaxSurrogateKey || true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinWithMaxSurrogateKey\nJoinWithMaxSurrogateKey derive(SURKEY = SURKEY + iifNull(MaxSurrogateKey,0),\n\t\tSCDACTIVE = 1,\n\t\tSCDACTIVESTARTTIME = toString(currentTimestamp(), 'dd-MM-yyyy HH:mm:ss'),\n\t\tSCDACTIVEENDTIME = toString(toTimestamp(toString(null())))) ~> AddDimensionColumns\nAddHashExisting, NewAndUpdatedRows exists(AddHashExisting@id_hash == AddHashInput@id_hash,\n\tnegate:false,\n\tbroadcast: 'auto')~> FilterForUpdatedValues\nFilterForUpdatedValues derive(SCDACTIVE = 0,\n\t\tSCDACTIVEENDTIME = toString(currentTimestamp(), 'dd-MM-yyyy HH:mm:ss')) ~> UpdateObsolete\nAddDimensionColumns select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColsInput\nMarkAsInsert, DropUnwantedColumns union(byName: true)~> UnionAllData\nUpdateObsolete alterRow(updateIf(true())) ~> MarkAsUpdate\nModifyColumns1 select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColumns\nDropUnwantedColsInput alterRow(insertIf(true())) ~> MarkAsInsert\nExistingDimensionTable filter(toInteger(byName('SCDACTIVE')) == 1) ~> FilterForActive\nMarkAsUpdate derive(each(match(name=='SURKEY'), $$ = toInteger($$))) ~> ModifyColumns1\nUnionAllData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tcontainer: ($vContainerName),\n\tfolderPath: ($vPath),\n\tcompressionCodec: 'none',\n\tpartitionFileNames:[($vSinkFile)],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> DimensionTableSink"
		}
	}
}